shijin18, huangf20, zhuxuank
Individual 20%:
shijin18:        4/4 (docker files, app.py in v1, and workers in v2, build script, load test, etc.)
huangf20:         4/4 (cassandra, orchestration scripts, monitor)
zhuxuank:         3/4 (logger, report)
-1 Pub/sub not the same as blocking stream so cannot be used synonymously

        4 - Seems to understand all parts of the system 
        3 - Understands most parts of the system, clear one or two parts not understood 
        2 - Many parts of the system are not well understood
        1 - Only demonstrated knowledge of one part of the system. 
        0 - No understanding of the system
Summary:
Excellent demo, the group seemed to know their system well for the most part. Marks were lost for missing key orchestration scripts and cassandra not being able to respond after a single node failure. 
Conceptual Misunderstandings: 


There seemed to be a confusion between whether a pub/sub is the same thing as a blocking stream. With pub/sub, all subscribed listeners receive every message in the channel, while with a blocking stream, only at most 1 listener gets the same 1 message from the queue, so there are no duplicate tasks being done in the background.


Remember to put everything in a script, even if it is a 1 line command. The script can later be extended to multiple lines, but from the user's perspective, the same script will continue to perform the same task despite the changes being made under the hood.

Architecture (10%): 4/4

        4 - Architecture has all key components
        3 - Missing 1 key component 
        2 - Many parts of the system are missing
        1 - Has a few key components	
        0 - Poor/vague architecture diagram

Report 20%: 15/23


        13/20 Discussing the system's architecture
                2/3 Diagram showing
                        [1] 1 Application system
                        [0] 1 Monitoring system
                        [1] 1 Data flow


                3/3 Application
                        [1] 1 Docker
                        [1] 1 Redis
                        [1] 1 Cassandra


                8/14 Discussion of each of the following with respect to your system.
                        [1] 1 Consistency
                        [1] 1 Availablity
                        [1] 1 Parition tolarance
                        [0] 1 Data paritioning
			How is data being partitioned, (quorum config)
                        [1] 1 Data replication
                        [0] 1 Load balancing
			"Docker swarm will automatically load balance" but what policy is being used, dicuss it with respect to ur system.
                        [1] 1 Caching
                        [1] 1 Process disaster recovery
                        [0] 1 Data disaster recovery
			missing
                        [0] 1 Orchestration
			missing
                        [0] 1 Healthcheck
			missing
                        [1] 1 Horizontal scalability
                        [0] 1 Vertical scalability
			missing
                        [1] 1 Well formatted document


        2/2 Discussing the system's performance
                [1] 1 Graph showing performance of system under load1
                [1] 1 Analysis of system performance under load1


        0/1 Discussion of the tools used during testing
	missing

Demo (weight 50%): 22/25


        8/8 Functionality
                0/5 Long to Short (PUT)
                        [1] 1 Good request. 201 or 200
                        [1] 1 Bad request. 400
                        [1] 1 Cached in Redis
                        [1] 1 Logged persistently
                                       [1] 1 Stored in cassandra
                0/3 Short to Long (GET)
                        [1] 1 Good request. 307
                        [1] 1 Bad request. 404
                        [1] 1 Uses Redis
                
        6/6 Monitoring and Health Check
                    [1] 1 Monitoring system watching the health of the url shortner system
                [1] 1 Health check implemented in URL Shortner 
                        Can check with docker container ps
                    [1] 1 Monitoring system watching the health of the Redis cluster
                    [1] 1 Monitoring system watching the health of the Cassandra cluster
                        Can't just bring up terminal and type: nodetool status, as a one off
                    [1] 1 Monitoring logger and writer
                    [1] 1 Shows all relevant information (UI or on terminal)
                        See status of each replica


        2/3 Disaster recovery
                [1] 1 Url shortner recovers/heals from a node dying
                        Kill a node and then bring it back


                [1] 1 Redis recovers/heals from a node dying
                        Kill a redis node, see system functions, then bring redis back up


                [0] 1 Data is persistent after the system recovers/heals from a node dying
                           Connection error after 1 node failure


        4/4 Scalability (scalability is limited to the number of VMs)
                [1] 1 Adding a node to the Url shortner system
                        docker service ls + monitor system
                [1] 1 Adding a node to the Redis cluster
                        rediscli + monitor system
                [1] 1 Adding a node to the Cassandra cluster
                        nodetool status + monitor system
                [1] 1 Removing all added nodes
                        monitor system


        2/4 Orchestration
                [1] 1 Automate launching the system onto the given nodes
                [0] 1 Automate adding a host to the cluster
                [0] 1 Automate removing a host from the cluster
                [1] 1 Automate shutdowning the cluster